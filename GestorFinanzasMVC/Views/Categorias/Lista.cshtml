@model IEnumerable<GestorFinanzasMVC.Models.Categoria>
@{
    ViewData["Title"] = "Lista de Categorías";
}

<div class="container py-4">
    <h2 class="text-center mb-4">Lista de Categorías</h2>

    <ul class="list-group">
        @foreach (var categoria in Model)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@categoria.Nombre</span>
                <button class="btn btn-sm btn-outline-danger" onclick="eliminarCategoria(@categoria.CategoriaId)">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
            </li>
        }
    </ul>
</div>

<!-- Toast -->
<div class="position-fixed top-0 end-0 p-3" style="z-index: 1100">
    <div id="toastCategoria" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastCategoriaTexto">Categoría eliminada.</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Cerrar"></button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function eliminarCategoria(id) {
            if (!confirm("¿Estás seguro de eliminar esta categoría?")) return;

            const response = await fetch(`/api/Categorias/${id}`, {
                method: 'DELETE',
                credentials: 'include'
            });

            if (response.ok) {
                document.getElementById("toastCategoriaTexto").textContent = "Categoría eliminada con éxito";
                const toast = new bootstrap.Toast(document.getElementById("toastCategoria"), { delay: 2000 });
                toast.show();

                // Refrescar después de mostrar el toast
                setTimeout(() => location.reload(), 2200);
            } else {
                alert("Error al eliminar la categoría.");
            }
        }
    </script>
}
